// <auto-generated />
using System;
using EcoSenseAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcoSenseAPI.Migrations
{
    [DbContext(typeof(EcoSenseContext))]
    partial class EcoSenseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("EcoSenseAPI.Models.Alerta", b =>
                {
                    b.Property<long>("IdAlerta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("IdAlerta"));

                    b.Property<long>("IdLectura")
                        .HasColumnType("bigint");

                    b.Property<long>("LecturaIdLectura")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TipoAlerta")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("Umbral")
                        .HasColumnType("float");

                    b.Property<float>("ValorMedido")
                        .HasColumnType("float");

                    b.HasKey("IdAlerta");

                    b.HasIndex("LecturaIdLectura");

                    b.ToTable("Alertas");
                });

            modelBuilder.Entity("EcoSenseAPI.Models.ConfiguracionUmbral", b =>
                {
                    b.Property<int>("IdUmbral")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdUmbral"));

                    b.Property<int>("Co2Max")
                        .HasColumnType("int");

                    b.Property<int>("DispositivoIdDispositivo")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaConfiguracion")
                        .HasColumnType("datetime(6)");

                    b.Property<float>("HumedadMax")
                        .HasColumnType("float");

                    b.Property<int>("IdDispositivo")
                        .HasColumnType("int");

                    b.Property<float>("Pm10Max")
                        .HasColumnType("float");

                    b.Property<float>("Pm1Max")
                        .HasColumnType("float");

                    b.Property<float>("Pm2_5Max")
                        .HasColumnType("float");

                    b.Property<float>("PresionMax")
                        .HasColumnType("float");

                    b.Property<float>("TemperaturaMax")
                        .HasColumnType("float");

                    b.HasKey("IdUmbral");

                    b.HasIndex("DispositivoIdDispositivo");

                    b.ToTable("ConfiguracionUmbrales");
                });

            modelBuilder.Entity("EcoSenseAPI.Models.DatoSalud", b =>
                {
                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("Alergias")
                        .HasColumnType("longtext");

                    b.Property<ushort>("AlturaCm")
                        .HasColumnType("smallint unsigned");

                    b.Property<string>("EnfermedadesRespiratorias")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Observaciones")
                        .HasColumnType("longtext");

                    b.Property<ushort>("PesoKg")
                        .HasColumnType("smallint unsigned");

                    b.HasKey("IdUsuario");

                    b.ToTable("DatosSalud");
                });

            modelBuilder.Entity("EcoSenseAPI.Models.Dispositivo", b =>
                {
                    b.Property<int>("IdDispositivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdDispositivo"));

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("Mac")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UsuarioIdUsuario")
                        .HasColumnType("int");

                    b.HasKey("IdDispositivo");

                    b.HasIndex("UsuarioIdUsuario");

                    b.ToTable("Dispositivos");
                });

            modelBuilder.Entity("EcoSenseAPI.Models.Lectura", b =>
                {
                    b.Property<long>("IdLectura")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("IdLectura"));

                    b.Property<int?>("Co2")
                        .HasColumnType("int");

                    b.Property<int>("DispositivoIdDispositivo")
                        .HasColumnType("int");

                    b.Property<float?>("Humedad")
                        .HasColumnType("float");

                    b.Property<int>("IdDispositivo")
                        .HasColumnType("int");

                    b.Property<float?>("Pm10")
                        .HasColumnType("float");

                    b.Property<float?>("Pm1_0")
                        .HasColumnType("float");

                    b.Property<float?>("Pm2_5")
                        .HasColumnType("float");

                    b.Property<float?>("Presion")
                        .HasColumnType("float");

                    b.Property<float?>("Temperatura")
                        .HasColumnType("float");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("IdLectura");

                    b.HasIndex("DispositivoIdDispositivo");

                    b.ToTable("Lecturas");
                });

            modelBuilder.Entity("EcoSenseAPI.Models.ReporteExportado", b =>
                {
                    b.Property<int>("IdReporte")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdReporte"));

                    b.Property<DateTime>("FechaExportacion")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<DateTime>("RangoFin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("RangoInicio")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TipoReporte")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UsuarioIdUsuario")
                        .HasColumnType("int");

                    b.HasKey("IdReporte");

                    b.HasIndex("UsuarioIdUsuario");

                    b.ToTable("ReportesExportados");
                });

            modelBuilder.Entity("EcoSenseAPI.Models.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdUsuario"));

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Empresa")
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Telefono")
                        .HasColumnType("longtext");

                    b.HasKey("IdUsuario");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("EcoSenseAPI.Models.Alerta", b =>
                {
                    b.HasOne("EcoSenseAPI.Models.Lectura", "Lectura")
                        .WithMany("Alertas")
                        .HasForeignKey("LecturaIdLectura")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lectura");
                });

            modelBuilder.Entity("EcoSenseAPI.Models.ConfiguracionUmbral", b =>
                {
                    b.HasOne("EcoSenseAPI.Models.Dispositivo", "Dispositivo")
                        .WithMany("ConfiguracionUmbrales")
                        .HasForeignKey("DispositivoIdDispositivo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dispositivo");
                });

            modelBuilder.Entity("EcoSenseAPI.Models.DatoSalud", b =>
                {
                    b.HasOne("EcoSenseAPI.Models.Usuario", "Usuario")
                        .WithOne("DatoSalud")
                        .HasForeignKey("EcoSenseAPI.Models.DatoSalud", "IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("EcoSenseAPI.Models.Dispositivo", b =>
                {
                    b.HasOne("EcoSenseAPI.Models.Usuario", "Usuario")
                        .WithMany("Dispositivos")
                        .HasForeignKey("UsuarioIdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("EcoSenseAPI.Models.Lectura", b =>
                {
                    b.HasOne("EcoSenseAPI.Models.Dispositivo", "Dispositivo")
                        .WithMany("Lecturas")
                        .HasForeignKey("DispositivoIdDispositivo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dispositivo");
                });

            modelBuilder.Entity("EcoSenseAPI.Models.ReporteExportado", b =>
                {
                    b.HasOne("EcoSenseAPI.Models.Usuario", "Usuario")
                        .WithMany("ReportesExportados")
                        .HasForeignKey("UsuarioIdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("EcoSenseAPI.Models.Dispositivo", b =>
                {
                    b.Navigation("ConfiguracionUmbrales");

                    b.Navigation("Lecturas");
                });

            modelBuilder.Entity("EcoSenseAPI.Models.Lectura", b =>
                {
                    b.Navigation("Alertas");
                });

            modelBuilder.Entity("EcoSenseAPI.Models.Usuario", b =>
                {
                    b.Navigation("DatoSalud");

                    b.Navigation("Dispositivos");

                    b.Navigation("ReportesExportados");
                });
#pragma warning restore 612, 618
        }
    }
}
